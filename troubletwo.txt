// GANTI FUNGSI LAMA DENGAN VERSI BARU INI
      function attachEventListenersToRow(row) {
        // Event listener untuk input angka manual (ini sudah benar)
        row.querySelectorAll(".stok-akhir").forEach((input) => {
          input.addEventListener("input", () => updateRowAndTotals(row));
        });

        // Logika untuk tombol spinner (ini juga sudah benar)
        const parentDiv = row.querySelector('.stok-akhir')?.closest('div');
        if (parentDiv) {
            const plusBtn = parentDiv.querySelector('.btn-plus');
            const minusBtn = parentDiv.querySelector('.btn-minus');
            const input = parentDiv.querySelector(".stok-akhir");

            if(plusBtn) {
                plusBtn.addEventListener("click", () => {
                    let currentValue = parseInt(input.value) || 0;
                    currentValue++;
                    input.value = currentValue;
                    input.dispatchEvent(new Event("input")); // Picu kalkulasi ulang
                });
            }

            if(minusBtn) {
                minusBtn.addEventListener("click", () => {
                    let currentValue = parseInt(input.value) || 0;
                    currentValue = Math.max(0, currentValue - 1);
                    input.value = currentValue;
                    input.dispatchEvent(new Event("input")); // Picu kalkulasi ulang
                });
            }
        }

         // ==========================================================
         // ===           INILAH PERBAIKAN UTAMANYA              ===
         // ==========================================================
         // Event listener untuk tombol notifikasi kita nonaktifkan sementara
         // karena fungsinya (handleNotifySupplier) belum dibuat.
         // INILAH YANG MENYEBABKAN ERROR FATAL.
         /*
         const notifyBtn = row.querySelector('.notify-btn');
         if (notifyBtn) {
            notifyBtn.addEventListener('click', () => handleNotifySupplier(notifyBtn));
         }
         */
         // ==========================================================
      }

      // (Letakkan ini setelah fungsi attachEventListenersToRow)

      // TAMBAHKAN FUNGSI BARU YANG HILANG INI
      function filterMainReportTable(e) {
        const searchTerm = e.target.value.toLowerCase();
        document.querySelectorAll("#report-tables-container .product-row").forEach(row => {
            const infoCell = row.querySelector('.product-supplier-info');
            if (infoCell) {
                const textContent = infoCell.textContent || infoCell.innerText;
                // Cek apakah teks di sel produk/supplier mengandung kata kunci pencarian
                const isVisible = textContent.toLowerCase().includes(searchTerm);
                // Tampilkan atau sembunyikan baris berdasarkan hasil pencarian
                row.style.display = isVisible ? "" : "none";
            }
        });
      }

      async function handleKirimLaporan() {
        if (!confirm("Kirim laporan ini? Laporan yang sudah dikirim tidak bisa diubah.")) return;

        const productData = [];
        document.querySelectorAll(".product-row").forEach((row) => {
          const stokAwal = row.querySelector(".stok-awal").value;
          const stokAkhir = row.querySelector(".stok-akhir").value;
          // Hanya kirim data yang diisi
          if (stokAwal > 0 || stokAkhir > 0) {
            productData.push({
              id: parseInt(row.dataset.productId),
              stok_awal: parseInt(stokAwal) || 0,
              stok_akhir: parseInt(stokAkhir) || 0,
            });
          }
        });

        if (productData.length === 0) return showToast("Tidak ada data penjualan.", false);

        const rekapData = {
          qris: document.getElementById("rekap-qris").value.replace(/\D/g, '') || '0',
          bca: document.getElementById("rekap-bca").value.replace(/\D/g, '') || '0',
          cash: document.getElementById("rekap-cash").value.replace(/\D/g, '') || '0',
          total: document.getElementById("total-manual").textContent.replace(/\D/g, "") || '0',
        };

        const payload = {
          lapak_id: AppState.currentUser.user_info.lapak_id,
          products: productData,
          rekap_pembayaran: rekapData,
        };

        const submitBtn = document.getElementById("kirim-laporan-btn");
        const originalBtnHTML = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm"></span> Mengirim...`;

        try {
          const response = await fetch("/api/submit_catatan_harian", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload),
          });
          const result = await response.json();
          showToast(result.message, response.ok);
          if (response.ok) await populateLapakDashboard(); 
        } catch (e) {
          showToast("Gagal terhubung ke server.", false);
        } finally {
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnHTML;
        }
      }
      async function populateHistoryLaporanPage() {
        const loadingEl = document.getElementById("history-loading"),
          listEl = document.getElementById("history-list");
        loadingEl.style.display = "block";
        listEl.innerHTML = "";
        const resp = await fetch(
          `/api/get_history_laporan/${AppState.currentUser.user_info.lapak_id}`
        );
        if (!resp.ok) {
          loadingEl.innerHTML =
            '<div class="alert alert-danger">Gagal memuat histori.</div>';
          return;
        }
        const result = await resp.json();
        loadingEl.style.display = "none";
        if (result.reports.length === 0) {
          listEl.innerHTML =
            '<div class="alert alert-info">Belum ada laporan yang dibuat.</div>';
          return;
        }
        result.reports.forEach((r) => {
          const statusBadge =
            r.status === "Terkonfirmasi"
              ? '<span class="badge bg-success">Terkonfirmasi</span>'
              : '<span class="badge bg-warning text-dark">Menunggu Konfirmasi</span>';
          listEl.innerHTML += `<div class="list-group-item"><div class="d-flex w-100 justify-content-between"><h5 class="mb-1">${new Date(
            r.tanggal
          ).toLocaleDateString("id-ID", {
            weekday: "long",
            year: "numeric",
            month: "long",
            day: "numeric",
          })}</h5>${statusBadge}</div><p class="mb-1">Total pendapatan: <strong>${formatCurrency(
            r.total_pendapatan
          )}</strong></p><small>Total produk terjual: ${
            r.total_produk_terjual
          } Pcs.</small></div>`;
        });
      }

      // --- SUPPLIER FUNCTIONS ---
      async function populateSupplierDashboard() {
        try {
          const supplierId = AppState.currentUser.user_info.supplier_id;
          const resp = await fetch(`/api/get_data_supplier/${supplierId}`);
          if (!resp.ok)
            throw new Error("Gagal mengambil data dashboard supplier");
          const result = await resp.json();
          if (result.success) {
            document.getElementById("supplier-total-tagihan").textContent =
              formatCurrency(result.summary.total_tagihan);
            document.getElementById(
              "supplier-penjualan-bulan-ini"
            ).textContent = formatCurrency(result.summary.penjualan_bulan_ini);
          } else {
            throw new Error(result.message);
          }
        } catch (error) {
          showToast(error.message || "Gagal memuat data dashboard.", false);
          document.getElementById("supplier-total-tagihan").textContent =
            "Error";
          document.getElementById("supplier-penjualan-bulan-ini").textContent =
            "Error";
        }
      }
      async function populateSupplierHistoryPage() {
        const loadingEl = document.getElementById('supplier-history-loading'),
              contentEl = document.getElementById('supplier-history-content'),
              salesBody = document.getElementById('supplier-sales-history-body'),
              paymentsBody = document.getElementById('supplier-payment-history-body'),
              lapakSelect = document.getElementById('supplier-history-lapak-filter');
        
        loadingEl.style.display = 'block';
        contentEl.style.display = 'none';

        // Ambil semua nilai dari filter
        const startDate = document.getElementById('supplier-history-start-date').value;
        const endDate = document.getElementById('supplier-history-end-date').value;
        const lapakId = lapakSelect.value;
        
        const params = new URLSearchParams();
        if (startDate) params.append('start_date', startDate);
        if (endDate) params.append('end_date', endDate);
        if (lapakId) params.append('lapak_id', lapakId); // Tambahkan lapak_id ke parameter
        const queryString = params.toString();

        try {
            const apiUrl = `/api/get_supplier_history/${AppState.currentUser.user_info.supplier_id}?${queryString}`;
            const resp = await fetch(apiUrl);
            const result = await resp.json();

            if (!result.success) throw new Error(result.message);

            // --- PERUBAHAN DI SINI: Mengisi dropdown lapak saat pertama kali dijalankan ---
            if (lapakSelect.options.length <= 1) { // Cek agar tidak diisi berulang kali
                if (result.lapaks) {
                    result.lapaks.forEach(l => {
                        lapakSelect.innerHTML += `<option value="${l.id}">${l.lokasi}</option>`;
                    });
                }
            }

            // Bagian untuk mengisi tabel pembayaran (tidak berubah)
            if (result.payments.length === 0) {
                paymentsBody.innerHTML = `<tr><td colspan="3" class="text-center text-muted">Belum ada pembayaran.</td></tr>`;
            } else {
                paymentsBody.innerHTML = result.payments.map(p => `
                    <tr>
                        <td>${new Date(p.tanggal + 'T00:00:00').toLocaleDateString('id-ID')}</td>
                        <td>${formatCurrency(p.jumlah)}</td>
                        <td><span class="badge bg-info">${p.metode}</span></td>
                    </tr>`).join('');
            }

            // Bagian untuk mengisi tabel penjualan (tidak berubah)
            if (result.sales.length === 0) {
                salesBody.innerHTML = `<tr><td colspan="4" class="text-center text-muted">Belum ada penjualan.</td></tr>`;
            } else {
                salesBody.innerHTML = result.sales.map(s => `
                    <tr>
                        <td>${new Date(s.tanggal + 'T00:00:00').toLocaleDateString('id-ID')}</td>
                        <td>${s.lokasi}</td>
                        <td>${s.nama_produk}</td>
                        <td>${s.terjual} Pcs</td>
                    </tr>`).join('');
            }
            
            loadingEl.style.display = 'none';
            contentEl.style.display = 'block';
        } catch (e) { 
            loadingEl.innerHTML = `<div class="alert alert-danger">${e.message}</div>`; 
        }
      }

      // --- APP INITIALIZATION ---
      document.addEventListener("DOMContentLoaded", () => {
        modals.admin = new bootstrap.Modal(
          document.getElementById("edit-admin-modal")
        );
        modals.lapak = new bootstrap.Modal(
          document.getElementById("edit-lapak-modal")
        );
        modals.supplier = new bootstrap.Modal(
          document.getElementById("edit-supplier-modal")
        );
        modals.payment = new bootstrap.Modal(
          document.getElementById("payment-confirmation-modal")
        );
        modals.reportDetail = new bootstrap.Modal(
          document.getElementById("report-detail-modal")
        );
        // PERUBAHAN 7: Inisialisasi modal baru
        
        modals.aturProduk = new bootstrap.Modal(
            document.getElementById("atur-produk-modal")
        );
        const rekapCollapseEl = document.getElementById('rekap-manual-collapse');
        if (rekapCollapseEl) {
            const rekapText = document.getElementById('toggle-rekap-text');
            const rekapIcon = document.getElementById('toggle-rekap-icon');

            // Saat akan ditampilkan (show)
            rekapCollapseEl.addEventListener('show.bs.collapse', event => {
                rekapText.textContent = 'Sembunyikan Input';
                rekapIcon.classList.remove('bi-chevron-up');
                rekapIcon.classList.add('bi-chevron-down');
            });

            // Saat akan disembunyikan (hide)
            rekapCollapseEl.addEventListener('hide.bs.collapse', event => {
                rekapText.textContent = 'Input Hasil Penjualan';
                rekapIcon.classList.remove('bi-chevron-down');
                rekapIcon.classList.add('bi-chevron-up');
            });
        }
        const todayISO = new Date().toISOString().split("T")[0];
        ["laporan-pendapatan-datepicker", "laporan-biaya-datepicker"].forEach(
          (id) => {
            const el = document.getElementById(id);
            if (el) el.value = todayISO;
          }
        );
        document
          .getElementById("login-form")
          .addEventListener("submit", handleLogin);
        document
          .getElementById("edit-admin-form")
          .addEventListener("submit", (e) => handleFormSubmit("admin", e));
        document
          .getElementById("edit-lapak-form")
          .addEventListener("submit", (e) => handleFormSubmit("lapak", e));
        document
          .getElementById("edit-supplier-form")
          .addEventListener("submit", (e) => handleFormSubmit("supplier", e));
        document
          .getElementById("payment-confirmation-form")
          .addEventListener("submit", handlePaymentSubmit);
        // ... (setelah listener handlePaymentSubmit)
        // TAMBAHAN: Event listener untuk form tambah produk di modal
        document
          .getElementById("add-product-to-supplier-form")
          .addEventListener("submit", handleAddNewProduct);

        // PERUBAHAN 8: Tambahkan event listener untuk form manual
        

        const lpd = document.getElementById("laporan-pendapatan-datepicker");
        if (lpd) lpd.addEventListener("change", populateLaporanPendapatan);
        const lbd = document.getElementById("laporan-biaya-datepicker");
        if (lbd) lbd.addEventListener("change", populateLaporanBiaya);
        document
          .getElementById("kirim-laporan-btn")
          .addEventListener("click", handleKirimLaporan);
        const filterBtn = document.getElementById('supplier-history-filter-btn');
        if(filterBtn) {
            filterBtn.addEventListener('click', populateSupplierHistoryPage);
        }
        const manageReportsFilterBtn = document.getElementById('manage-reports-filter-btn');
        if(manageReportsFilterBtn) {
            manageReportsFilterBtn.addEventListener('click', populateManageReportsPage);
        }
        
        const paymentHistoryFilterBtn = document.getElementById('payment-history-filter-btn');
        if(paymentHistoryFilterBtn) {
            paymentHistoryFilterBtn.addEventListener('click', populatePaymentHistory);
        }

        const ownerSupplierSelect = document.getElementById('owner-supplier-select');
        if(ownerSupplierSelect) {
            // Listener ini memastikan data tampil saat supplier DIPILIH
            ownerSupplierSelect.addEventListener('change', fetchAndDisplayOwnerSupplierHistory);
        }
        const chartFilterBtn = document.getElementById('chart-filter-btn');
        if(chartFilterBtn) {
            chartFilterBtn.addEventListener('click', fetchAndDrawCharts);
        }
        const ownerHistoryFilterBtn = document.getElementById('owner-history-filter-btn');
        if(ownerHistoryFilterBtn) {
            // Listener ini memastikan data ter-filter saat tombol DIKLIK
            ownerHistoryFilterBtn.addEventListener('click', fetchAndDisplayOwnerSupplierHistory);
        }
        /*const searchInput = document.getElementById('product-search-input');
        if (searchInput) {
            searchInput.addEventListener('input', filterReportTables);
        }*/
        manageFooterVisibility(); 
        handleAuthRouting();
        updateDate();
      });
    </script>